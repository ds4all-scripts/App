library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(c(shiny,shinydashboard)
library(shinydashboard)
library(shinydashboard)
library(shiny)
library(shinydashboard)
runApp()
runApp()
runApp()
runApp()
runApp()
library(readxl)
library(mice)
Toxinas = read.csv("Alltoxins.csv",
encoding = "UTF-8" )
library(ggplot2)
runApp()
library(cowplot)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(Toxinas)
runApp()
glimpse(Toxinas)
library(reshape)
library(dplyr)
library(lubridate)
library(stats)
library(tseries)
library(rugarch)
library(fpp)
library(forecast)
library(car)
library(nortest)
require(graphics)
library(mFilter)
library(ggplot2)
library(tidyverse)
library(cowplot)
library(randomForest)
library(readxl)
library(mice)
library(shiny)
library(shinydashboard)
glimpse(Toxinas)
str(Toxinas)
summary(Toxinas)
runApp()
runApp()
runApp()
runApp()
output$summary =
renderPrint(
summary(Toxinas)
)
summary(Toxinas)
runApp()
runApp()
library(dplyr)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("trimws")
runApp()
runApp()
runApp()
runApp()
str(Toxinas)
Toxinas$Date=as.Date.POSIXct(Toxinas$Date)
Toxinas$Date=as.Date(Toxinas$Date)
str(Toxinas)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("prophet")
library(reshape)
library(dplyr)
library(lubridate)
library(stats)
library(tseries)
library(rugarch)
library(fpp)
library(forecast)
library(car)
library(nortest)
require(graphics)
library(mFilter)
library(ggplot2)
library(tidyverse)
library(cowplot)
library(randomForest)
library(readxl)
library(mice)
library(shiny)
library(shinydashboard)
library(reshape)
library(dplyr)
library(lubridate)
library(stats)
library(tseries)
library(rugarch)
library(fpp)
library(forecast)
library(car)
library(nortest)
require(graphics)
library(mFilter)
library(ggplot2)
library(tidyverse)
library(cowplot)
library(randomForest)
library(readxl)
library(mice)
library(shiny)
library(shinydashboard)
library(prophet)
Local = "C:/Users/eduar/Documents/GitHub/time-series"
setwd(Local)
Toxinas = read.csv("Datasets/Alltoxins.csv",encoding = "UTF-8" )
modelo = prophet(Toxinas)
Toxinasmc = Toxinas[Toxinas$type == "mc",]
View(Toxinasmc)
Toxinascyn = Toxinas[Toxinas$type == "cyn",]
Toxinasstx = Toxinas[Toxinas$type == "stx",]
colnames(Toxinasmc) = c(ds,y,tipo)
colnames(Toxinasmc) = c("ds","y","tipo")
colnames(Toxinascyn) = c("ds","y","tipo")
colnames(Toxinasstx) = c("ds","y","tipo")
modelo = prophet(Toxinasmc)
modelomc = prophet(Toxinasmc)
modelocyn = prophet(Toxinasmc)
modelostx = prophet(Toxinasmc)
futuromc = make_future_dataframe(modelomc)
futuromc = make_future_dataframe(modelomc, periods = 15)
tail(futuromc)
tail(Toxinasmc)
futuromc = make_future_dataframe(modelomc, periods = 30)
tail(Toxinasmc)
tail(futuromc)
forecastmc = predict(modelomc,futuromc)
prophet_plot_components(forecastmc)
prophet_plot_components(modelomc,forecastmc)
futuromc = make_future_dataframe(modelomc, periods = 365)
forecastmc = predict(modelomc,futuromc)
prophet_plot_components(modelomc,forecastmc)
plot(modelomc,forecastmc)
plot(modelomc,forecastmc) +add_changepoints_to_plot(modelomc)
modelomc = prophet(Toxinasmc, changepoint.prior.scale = 0.1)
plot(modelomc,forecastmc) +add_changepoints_to_plot(modelomc)
modelomc = prophet(Toxinasmc, changepoint.prior.scale = 0.1, interval.width = 0.95)
futuromc = make_future_dataframe(modelomc, periods = 365)
forecastmc = predict(modelomc,futuromc)
prophet_plot_components(modelomc,forecastmc)
modelomc = prophet(Toxinasmc, changepoint.prior.scale = 0.1, )
futuromc = make_future_dataframe(modelomc, periods = 365)
forecastmc = predict(modelomc,futuromc)
prophet_plot_components(modelomc,forecastmc)
modelomc = prophet(Toxinasmc, changepoint.prior.scale = 0.05, )
futuromc = make_future_dataframe(modelomc, periods = 365)
forecastmc = predict(modelomc,futuromc)
prophet_plot_components(modelomc,forecastmc)
View(Toxinasmc)
modelomc = prophet(Toxinasmc, changepoint.prior.scale = 0.08, interval.width = 0.95)
futuromc = make_future_dataframe(modelomc, periods = 365)
forecastmc = predict(modelomc,futuromc)
prophet_plot_components(modelomc,forecastmc)
modelomc = prophet(Toxinasmc, changepoint.prior.scale = 0.05, interval.width = 0.95)
futuromc = make_future_dataframe(modelomc, periods = 365)
forecastmc = predict(modelomc,futuromc)
prophet_plot_components(modelomc,forecastmc)
modelomc = prophet(Toxinasmc, changepoint.prior.scale = 0.06, interval.width = 0.95)
futuromc = make_future_dataframe(modelomc, periods = 365)
forecastmc = predict(modelomc,futuromc)
prophet_plot_components(modelomc,forecastmc)
plot(modelomc,forecastmc) +add_changepoints_to_plot(modelomc)
library(prophet)
runApp('~/GitHub/App2')
runApp('~/GitHub/App2')
runApp('~/GitHub/App2')
runApp('~/GitHub/App2')
runApp('~/GitHub/App2')
runApp('~/GitHub/App2')
runApp('~/GitHub/App2')
runApp('~/GitHub/App2')
runApp('~/GitHub/App2')
runApp('~/GitHub/App2')
runApp()
runApp('~/GitHub/App2')
runApp()
runApp('~/GitHub/App2')
runApp()
runApp('~/GitHub/App2')
runApp('~/GitHub/App2')
runApp('~/GitHub/App2')
library(dygraphs)
runApp('~/GitHub/App2')
runApp('~/GitHub/App2')
runApp('~/GitHub/App2')
runApp('~/GitHub/App2')
shiny::runApp()
runApp()
prophet_plot_components(modelomc,forecastmc)
